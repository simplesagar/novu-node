/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type SubscribersControllerUpdateSubscriberPreferenceRequest = {
    subscriberId: string;
    parameter: string;
    updateSubscriberPreferenceRequestDto: components.UpdateSubscriberPreferenceRequestDto;
};

/** @internal */
export namespace SubscribersControllerUpdateSubscriberPreferenceRequest$ {
    export const inboundSchema: z.ZodType<
        SubscribersControllerUpdateSubscriberPreferenceRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            subscriberId: z.string(),
            parameter: z.string(),
            UpdateSubscriberPreferenceRequestDto:
                components.UpdateSubscriberPreferenceRequestDto$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                UpdateSubscriberPreferenceRequestDto: "updateSubscriberPreferenceRequestDto",
            });
        });

    export type Outbound = {
        subscriberId: string;
        parameter: string;
        UpdateSubscriberPreferenceRequestDto: components.UpdateSubscriberPreferenceRequestDto$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SubscribersControllerUpdateSubscriberPreferenceRequest
    > = z
        .object({
            subscriberId: z.string(),
            parameter: z.string(),
            updateSubscriberPreferenceRequestDto:
                components.UpdateSubscriberPreferenceRequestDto$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                updateSubscriberPreferenceRequestDto: "UpdateSubscriberPreferenceRequestDto",
            });
        });
}
