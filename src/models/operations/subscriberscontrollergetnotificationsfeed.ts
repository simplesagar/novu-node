/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type SubscribersControllerGetNotificationsFeedRequest = {
    subscriberId: string;
    page?: number | undefined;
    limit?: number | undefined;
    read?: boolean | undefined;
    seen?: boolean | undefined;
    /**
     * Base64 encoded string of the partial payload JSON object
     */
    payload?: string | undefined;
};

export type SubscribersControllerGetNotificationsFeedResponseBody = {
    data: Array<components.FeedResponseDto>;
    /**
     * Does the list have more items to fetch
     */
    hasMore: boolean;
    /**
     * The current page of the paginated response
     */
    page: number;
    /**
     * Number of items on each page
     */
    pageSize: number;
};

/** @internal */
export namespace SubscribersControllerGetNotificationsFeedRequest$ {
    export const inboundSchema: z.ZodType<
        SubscribersControllerGetNotificationsFeedRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        subscriberId: z.string(),
        page: z.number().optional(),
        limit: z.number().default(10),
        read: z.boolean().optional(),
        seen: z.boolean().optional(),
        payload: z.string().optional(),
    });

    export type Outbound = {
        subscriberId: string;
        page?: number | undefined;
        limit: number;
        read?: boolean | undefined;
        seen?: boolean | undefined;
        payload?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SubscribersControllerGetNotificationsFeedRequest
    > = z.object({
        subscriberId: z.string(),
        page: z.number().optional(),
        limit: z.number().default(10),
        read: z.boolean().optional(),
        seen: z.boolean().optional(),
        payload: z.string().optional(),
    });
}

/** @internal */
export namespace SubscribersControllerGetNotificationsFeedResponseBody$ {
    export const inboundSchema: z.ZodType<
        SubscribersControllerGetNotificationsFeedResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        data: z.array(components.FeedResponseDto$.inboundSchema),
        hasMore: z.boolean(),
        page: z.number(),
        pageSize: z.number(),
    });

    export type Outbound = {
        data: Array<components.FeedResponseDto$.Outbound>;
        hasMore: boolean;
        page: number;
        pageSize: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SubscribersControllerGetNotificationsFeedResponseBody
    > = z.object({
        data: z.array(components.FeedResponseDto$.outboundSchema),
        hasMore: z.boolean(),
        page: z.number(),
        pageSize: z.number(),
    });
}
