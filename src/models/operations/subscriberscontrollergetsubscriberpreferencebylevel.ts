/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * the preferences level to be retrieved( Subscriber / Topic)
 */
export const Parameter = {
    Subscriber: "Subscriber",
    Topic: "Topic",
} as const;
/**
 * the preferences level to be retrieved( Subscriber / Topic)
 */
export type Parameter = ClosedEnum<typeof Parameter>;

export type SubscribersControllerGetSubscriberPreferenceByLevelRequest = {
    /**
     * the preferences level to be retrieved( Subscriber / Topic)
     */
    parameter: Parameter;
    subscriberId: string;
};

/** @internal */
export namespace Parameter$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Parameter> = z.nativeEnum(Parameter);
    export const outboundSchema: z.ZodNativeEnum<typeof Parameter> = inboundSchema;
}

/** @internal */
export namespace SubscribersControllerGetSubscriberPreferenceByLevelRequest$ {
    export const inboundSchema: z.ZodType<
        SubscribersControllerGetSubscriberPreferenceByLevelRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        parameter: Parameter$.inboundSchema,
        subscriberId: z.string(),
    });

    export type Outbound = {
        parameter: string;
        subscriberId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SubscribersControllerGetSubscriberPreferenceByLevelRequest
    > = z.object({
        parameter: Parameter$.outboundSchema,
        subscriberId: z.string(),
    });
}
