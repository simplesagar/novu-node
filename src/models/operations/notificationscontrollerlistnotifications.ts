/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const Channels = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type Channels = ClosedEnum<typeof Channels>;

export type NotificationsControllerListNotificationsRequest = {
    channels: Array<Channels>;
    templates: Array<string>;
    emails: Array<string>;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    search: string;
    subscriberIds: Array<string>;
    page?: number | undefined;
    transactionId?: string | undefined;
};

/** @internal */
export namespace Channels$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Channels> = z.nativeEnum(Channels);
    export const outboundSchema: z.ZodNativeEnum<typeof Channels> = inboundSchema;
}

/** @internal */
export namespace NotificationsControllerListNotificationsRequest$ {
    export const inboundSchema: z.ZodType<
        NotificationsControllerListNotificationsRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        channels: z.array(Channels$.inboundSchema),
        templates: z.array(z.string()),
        emails: z.array(z.string()),
        search: z.string(),
        subscriberIds: z.array(z.string()),
        page: z.number().default(0),
        transactionId: z.string().optional(),
    });

    export type Outbound = {
        channels: Array<string>;
        templates: Array<string>;
        emails: Array<string>;
        search: string;
        subscriberIds: Array<string>;
        page: number;
        transactionId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        NotificationsControllerListNotificationsRequest
    > = z.object({
        channels: z.array(Channels$.outboundSchema),
        templates: z.array(z.string()),
        emails: z.array(z.string()),
        search: z.string(),
        subscriberIds: z.array(z.string()),
        page: z.number().default(0),
        transactionId: z.string().optional(),
    });
}
