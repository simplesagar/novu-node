/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Status for trigger
 */
export const TriggerEventResponseDtoStatus = {
    Error: "error",
    TriggerNotActive: "trigger_not_active",
    NoWorkflowActiveStepsDefined: "no_workflow_active_steps_defined",
    NoWorkflowStepsDefined: "no_workflow_steps_defined",
    Processed: "processed",
    SubscriberIdMissing: "subscriber_id_missing",
    NoTenantFound: "no_tenant_found",
} as const;
/**
 * Status for trigger
 */
export type TriggerEventResponseDtoStatus = ClosedEnum<typeof TriggerEventResponseDtoStatus>;

export type TriggerEventResponseDto = {
    /**
     * If trigger was acknowledged or not
     */
    acknowledged: boolean;
    /**
     * In case of an error, this field will contain the error message
     */
    error?: Array<string> | undefined;
    /**
     * Status for trigger
     */
    status: TriggerEventResponseDtoStatus;
    /**
     * Transaction id for trigger
     */
    transactionId?: string | undefined;
};

/** @internal */
export namespace TriggerEventResponseDtoStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof TriggerEventResponseDtoStatus> =
        z.nativeEnum(TriggerEventResponseDtoStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof TriggerEventResponseDtoStatus> =
        inboundSchema;
}

/** @internal */
export namespace TriggerEventResponseDto$ {
    export const inboundSchema: z.ZodType<TriggerEventResponseDto, z.ZodTypeDef, unknown> =
        z.object({
            acknowledged: z.boolean(),
            error: z.array(z.string()).optional(),
            status: TriggerEventResponseDtoStatus$.inboundSchema,
            transactionId: z.string().optional(),
        });

    export type Outbound = {
        acknowledged: boolean;
        error?: Array<string> | undefined;
        status: string;
        transactionId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TriggerEventResponseDto> =
        z.object({
            acknowledged: z.boolean(),
            error: z.array(z.string()).optional(),
            status: TriggerEventResponseDtoStatus$.outboundSchema,
            transactionId: z.string().optional(),
        });
}
