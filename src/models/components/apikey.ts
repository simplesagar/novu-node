/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type ApiKey = {
    userId: string;
    key: string;
};

/** @internal */
export namespace ApiKey$ {
    export const inboundSchema: z.ZodType<ApiKey, z.ZodTypeDef, unknown> = z
        .object({
            _userId: z.string(),
            key: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                _userId: "userId",
            });
        });

    export type Outbound = {
        _userId: string;
        key: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApiKey> = z
        .object({
            userId: z.string(),
            key: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                userId: "_userId",
            });
        });
}
