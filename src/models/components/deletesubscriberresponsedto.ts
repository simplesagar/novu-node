/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The status enum for the performed action
 */
export const DeleteSubscriberResponseDtoStatus = {
    Deleted: "deleted",
} as const;
/**
 * The status enum for the performed action
 */
export type DeleteSubscriberResponseDtoStatus = ClosedEnum<
    typeof DeleteSubscriberResponseDtoStatus
>;

export type DeleteSubscriberResponseDto = {
    /**
     * A boolean stating the success of the action
     */
    acknowledged: boolean;
    /**
     * The status enum for the performed action
     */
    status: DeleteSubscriberResponseDtoStatus;
};

/** @internal */
export namespace DeleteSubscriberResponseDtoStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof DeleteSubscriberResponseDtoStatus> =
        z.nativeEnum(DeleteSubscriberResponseDtoStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof DeleteSubscriberResponseDtoStatus> =
        inboundSchema;
}

/** @internal */
export namespace DeleteSubscriberResponseDto$ {
    export const inboundSchema: z.ZodType<DeleteSubscriberResponseDto, z.ZodTypeDef, unknown> =
        z.object({
            acknowledged: z.boolean(),
            status: DeleteSubscriberResponseDtoStatus$.inboundSchema,
        });

    export type Outbound = {
        acknowledged: boolean;
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteSubscriberResponseDto> =
        z.object({
            acknowledged: z.boolean(),
            status: DeleteSubscriberResponseDtoStatus$.outboundSchema,
        });
}
