/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UpdateTenantResponseDtoData = {};

export type UpdateTenantResponseDto = {
    environmentId: string;
    id: string;
    createdAt: string;
    data?: UpdateTenantResponseDtoData | undefined;
    identifier: string;
    name?: string | undefined;
    updatedAt: string;
};

/** @internal */
export namespace UpdateTenantResponseDtoData$ {
    export const inboundSchema: z.ZodType<UpdateTenantResponseDtoData, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTenantResponseDtoData> =
        z.object({});
}

/** @internal */
export namespace UpdateTenantResponseDto$ {
    export const inboundSchema: z.ZodType<UpdateTenantResponseDto, z.ZodTypeDef, unknown> = z
        .object({
            _environmentId: z.string(),
            _id: z.string(),
            createdAt: z.string(),
            data: z.lazy(() => UpdateTenantResponseDtoData$.inboundSchema).optional(),
            identifier: z.string(),
            name: z.string().optional(),
            updatedAt: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                _environmentId: "environmentId",
                _id: "id",
            });
        });

    export type Outbound = {
        _environmentId: string;
        _id: string;
        createdAt: string;
        data?: UpdateTenantResponseDtoData$.Outbound | undefined;
        identifier: string;
        name?: string | undefined;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTenantResponseDto> = z
        .object({
            environmentId: z.string(),
            id: z.string(),
            createdAt: z.string(),
            data: z.lazy(() => UpdateTenantResponseDtoData$.outboundSchema).optional(),
            identifier: z.string(),
            name: z.string().optional(),
            updatedAt: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                environmentId: "_environmentId",
                id: "_id",
            });
        });
}
