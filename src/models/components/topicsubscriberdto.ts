/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type TopicSubscriberDto = {
    environmentId: string;
    organizationId: string;
    subscriberId: string;
    topicId: string;
    externalSubscriberId: string;
    topicKey: string;
};

/** @internal */
export namespace TopicSubscriberDto$ {
    export const inboundSchema: z.ZodType<TopicSubscriberDto, z.ZodTypeDef, unknown> = z
        .object({
            _environmentId: z.string(),
            _organizationId: z.string(),
            _subscriberId: z.string(),
            _topicId: z.string(),
            externalSubscriberId: z.string(),
            topicKey: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                _environmentId: "environmentId",
                _organizationId: "organizationId",
                _subscriberId: "subscriberId",
                _topicId: "topicId",
            });
        });

    export type Outbound = {
        _environmentId: string;
        _organizationId: string;
        _subscriberId: string;
        _topicId: string;
        externalSubscriberId: string;
        topicKey: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TopicSubscriberDto> = z
        .object({
            environmentId: z.string(),
            organizationId: z.string(),
            subscriberId: z.string(),
            topicId: z.string(),
            externalSubscriberId: z.string(),
            topicKey: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                environmentId: "_environmentId",
                organizationId: "_organizationId",
                subscriberId: "_subscriberId",
                topicId: "_topicId",
            });
        });
}
