/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type ProviderId = {};

export const Source = {
    Credentials: "Credentials",
    Internal: "Internal",
    Payload: "Payload",
    Webhook: "Webhook",
} as const;
export type Source = ClosedEnum<typeof Source>;

export const Status = {
    Success: "Success",
    Warning: "Warning",
    Failed: "Failed",
    Pending: "Pending",
    Queued: "Queued",
    ReadConfirmation: "ReadConfirmation",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type ActivityNotificationExecutionDetailResponseDto = {
    id: string;
    jobId: string;
    detail: string;
    isRetry: boolean;
    isTest: boolean;
    providerId: ProviderId;
    raw?: string | undefined;
    source: Source;
    status: Status;
};

/** @internal */
export namespace ProviderId$ {
    export const inboundSchema: z.ZodType<ProviderId, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProviderId> = z.object({});
}

/** @internal */
export namespace Source$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Source> = z.nativeEnum(Source);
    export const outboundSchema: z.ZodNativeEnum<typeof Source> = inboundSchema;
}

/** @internal */
export namespace Status$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);
    export const outboundSchema: z.ZodNativeEnum<typeof Status> = inboundSchema;
}

/** @internal */
export namespace ActivityNotificationExecutionDetailResponseDto$ {
    export const inboundSchema: z.ZodType<
        ActivityNotificationExecutionDetailResponseDto,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            _id: z.string(),
            _jobId: z.string(),
            detail: z.string(),
            isRetry: z.boolean(),
            isTest: z.boolean(),
            providerId: z.lazy(() => ProviderId$.inboundSchema),
            raw: z.string().optional(),
            source: Source$.inboundSchema,
            status: Status$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                _id: "id",
                _jobId: "jobId",
            });
        });

    export type Outbound = {
        _id: string;
        _jobId: string;
        detail: string;
        isRetry: boolean;
        isTest: boolean;
        providerId: ProviderId$.Outbound;
        raw?: string | undefined;
        source: string;
        status: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ActivityNotificationExecutionDetailResponseDto
    > = z
        .object({
            id: z.string(),
            jobId: z.string(),
            detail: z.string(),
            isRetry: z.boolean(),
            isTest: z.boolean(),
            providerId: z.lazy(() => ProviderId$.outboundSchema),
            raw: z.string().optional(),
            source: Source$.outboundSchema,
            status: Status$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                id: "_id",
                jobId: "_jobId",
            });
        });
}
