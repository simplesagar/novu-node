/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { NotificationGroup, NotificationGroup$ } from "./notificationgroup.js";
import { NotificationStep, NotificationStep$ } from "./notificationstep.js";
import { NotificationTrigger, NotificationTrigger$ } from "./notificationtrigger.js";
import { PreferenceChannels, PreferenceChannels$ } from "./preferencechannels.js";
import * as z from "zod";

export type WorkflowResponseData = {};

export type WorkflowIntegrationStatus = {};

export type WorkflowResponse = {
    creatorId: string;
    environmentId: string;
    id?: string | undefined;
    notificationGroupId: string;
    organizationId: string;
    parentId?: string | undefined;
    active: boolean;
    critical: boolean;
    data?: WorkflowResponseData | undefined;
    deleted: boolean;
    deletedAt: string;
    deletedBy: string;
    description: string;
    draft: boolean;
    name: string;
    notificationGroup?: NotificationGroup | undefined;
    preferenceSettings: PreferenceChannels;
    steps: Array<NotificationStep>;
    tags: Array<string>;
    triggers: Array<NotificationTrigger>;
    workflowIntegrationStatus?: WorkflowIntegrationStatus | undefined;
};

/** @internal */
export namespace WorkflowResponseData$ {
    export const inboundSchema: z.ZodType<WorkflowResponseData, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowResponseData> = z.object(
        {}
    );
}

/** @internal */
export namespace WorkflowIntegrationStatus$ {
    export const inboundSchema: z.ZodType<WorkflowIntegrationStatus, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowIntegrationStatus> =
        z.object({});
}

/** @internal */
export namespace WorkflowResponse$ {
    export const inboundSchema: z.ZodType<WorkflowResponse, z.ZodTypeDef, unknown> = z
        .object({
            _creatorId: z.string(),
            _environmentId: z.string(),
            _id: z.string().optional(),
            _notificationGroupId: z.string(),
            _organizationId: z.string(),
            _parentId: z.string().optional(),
            active: z.boolean(),
            critical: z.boolean(),
            data: z.lazy(() => WorkflowResponseData$.inboundSchema).optional(),
            deleted: z.boolean(),
            deletedAt: z.string(),
            deletedBy: z.string(),
            description: z.string(),
            draft: z.boolean(),
            name: z.string(),
            notificationGroup: NotificationGroup$.inboundSchema.optional(),
            preferenceSettings: PreferenceChannels$.inboundSchema,
            steps: z.array(NotificationStep$.inboundSchema),
            tags: z.array(z.string()),
            triggers: z.array(NotificationTrigger$.inboundSchema),
            workflowIntegrationStatus: z
                .lazy(() => WorkflowIntegrationStatus$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                _creatorId: "creatorId",
                _environmentId: "environmentId",
                _id: "id",
                _notificationGroupId: "notificationGroupId",
                _organizationId: "organizationId",
                _parentId: "parentId",
            });
        });

    export type Outbound = {
        _creatorId: string;
        _environmentId: string;
        _id?: string | undefined;
        _notificationGroupId: string;
        _organizationId: string;
        _parentId?: string | undefined;
        active: boolean;
        critical: boolean;
        data?: WorkflowResponseData$.Outbound | undefined;
        deleted: boolean;
        deletedAt: string;
        deletedBy: string;
        description: string;
        draft: boolean;
        name: string;
        notificationGroup?: NotificationGroup$.Outbound | undefined;
        preferenceSettings: PreferenceChannels$.Outbound;
        steps: Array<NotificationStep$.Outbound>;
        tags: Array<string>;
        triggers: Array<NotificationTrigger$.Outbound>;
        workflowIntegrationStatus?: WorkflowIntegrationStatus$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WorkflowResponse> = z
        .object({
            creatorId: z.string(),
            environmentId: z.string(),
            id: z.string().optional(),
            notificationGroupId: z.string(),
            organizationId: z.string(),
            parentId: z.string().optional(),
            active: z.boolean(),
            critical: z.boolean(),
            data: z.lazy(() => WorkflowResponseData$.outboundSchema).optional(),
            deleted: z.boolean(),
            deletedAt: z.string(),
            deletedBy: z.string(),
            description: z.string(),
            draft: z.boolean(),
            name: z.string(),
            notificationGroup: NotificationGroup$.outboundSchema.optional(),
            preferenceSettings: PreferenceChannels$.outboundSchema,
            steps: z.array(NotificationStep$.outboundSchema),
            tags: z.array(z.string()),
            triggers: z.array(NotificationTrigger$.outboundSchema),
            workflowIntegrationStatus: z
                .lazy(() => WorkflowIntegrationStatus$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                creatorId: "_creatorId",
                environmentId: "_environmentId",
                id: "_id",
                notificationGroupId: "_notificationGroupId",
                organizationId: "_organizationId",
                parentId: "_parentId",
            });
        });
}
