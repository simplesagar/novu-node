/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type ActivityNotificationSubscriberResponseDto = {
    id: string;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    phone?: string | undefined;
};

/** @internal */
export namespace ActivityNotificationSubscriberResponseDto$ {
    export const inboundSchema: z.ZodType<
        ActivityNotificationSubscriberResponseDto,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            _id: z.string(),
            email: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            phone: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                _id: "id",
            });
        });

    export type Outbound = {
        _id: string;
        email?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        phone?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ActivityNotificationSubscriberResponseDto
    > = z
        .object({
            id: z.string(),
            email: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            phone: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                id: "_id",
            });
        });
}
