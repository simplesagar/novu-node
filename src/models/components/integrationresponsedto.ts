/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import { CredentialsDto, CredentialsDto$ } from "./credentialsdto.js";
import { StepFilter, StepFilter$ } from "./stepfilter.js";
import * as z from "zod";

export const IntegrationResponseDtoChannel = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type IntegrationResponseDtoChannel = ClosedEnum<typeof IntegrationResponseDtoChannel>;

export type IntegrationResponseDto = {
    environmentId: string;
    id?: string | undefined;
    organizationId: string;
    active: boolean;
    channel: IntegrationResponseDtoChannel;
    conditions?: Array<StepFilter> | undefined;
    credentials: CredentialsDto;
    deleted: boolean;
    deletedAt: string;
    deletedBy: string;
    identifier: string;
    name: string;
    primary: boolean;
    providerId: string;
};

/** @internal */
export namespace IntegrationResponseDtoChannel$ {
    export const inboundSchema: z.ZodNativeEnum<typeof IntegrationResponseDtoChannel> =
        z.nativeEnum(IntegrationResponseDtoChannel);
    export const outboundSchema: z.ZodNativeEnum<typeof IntegrationResponseDtoChannel> =
        inboundSchema;
}

/** @internal */
export namespace IntegrationResponseDto$ {
    export const inboundSchema: z.ZodType<IntegrationResponseDto, z.ZodTypeDef, unknown> = z
        .object({
            _environmentId: z.string(),
            _id: z.string().optional(),
            _organizationId: z.string(),
            active: z.boolean(),
            channel: IntegrationResponseDtoChannel$.inboundSchema,
            conditions: z.array(StepFilter$.inboundSchema).optional(),
            credentials: CredentialsDto$.inboundSchema,
            deleted: z.boolean(),
            deletedAt: z.string(),
            deletedBy: z.string(),
            identifier: z.string(),
            name: z.string(),
            primary: z.boolean(),
            providerId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                _environmentId: "environmentId",
                _id: "id",
                _organizationId: "organizationId",
            });
        });

    export type Outbound = {
        _environmentId: string;
        _id?: string | undefined;
        _organizationId: string;
        active: boolean;
        channel: string;
        conditions?: Array<StepFilter$.Outbound> | undefined;
        credentials: CredentialsDto$.Outbound;
        deleted: boolean;
        deletedAt: string;
        deletedBy: string;
        identifier: string;
        name: string;
        primary: boolean;
        providerId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IntegrationResponseDto> = z
        .object({
            environmentId: z.string(),
            id: z.string().optional(),
            organizationId: z.string(),
            active: z.boolean(),
            channel: IntegrationResponseDtoChannel$.outboundSchema,
            conditions: z.array(StepFilter$.outboundSchema).optional(),
            credentials: CredentialsDto$.outboundSchema,
            deleted: z.boolean(),
            deletedAt: z.string(),
            deletedBy: z.string(),
            identifier: z.string(),
            name: z.string(),
            primary: z.boolean(),
            providerId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                environmentId: "_environmentId",
                id: "_id",
                organizationId: "_organizationId",
            });
        });
}
