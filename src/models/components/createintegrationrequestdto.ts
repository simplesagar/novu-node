/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import { CredentialsDto, CredentialsDto$ } from "./credentialsdto.js";
import { StepFilter, StepFilter$ } from "./stepfilter.js";
import * as z from "zod";

export const Channel = {
    InApp: "in_app",
    Email: "email",
    Sms: "sms",
    Chat: "chat",
    Push: "push",
} as const;
export type Channel = ClosedEnum<typeof Channel>;

export type CreateIntegrationRequestDto = {
    environmentId?: string | undefined;
    /**
     * If the integration is active the validation on the credentials field will run
     */
    active?: boolean | undefined;
    channel: Channel;
    check?: boolean | undefined;
    conditions?: Array<StepFilter> | undefined;
    credentials?: CredentialsDto | undefined;
    identifier?: string | undefined;
    name?: string | undefined;
    providerId: string;
};

/** @internal */
export namespace Channel$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Channel> = z.nativeEnum(Channel);
    export const outboundSchema: z.ZodNativeEnum<typeof Channel> = inboundSchema;
}

/** @internal */
export namespace CreateIntegrationRequestDto$ {
    export const inboundSchema: z.ZodType<CreateIntegrationRequestDto, z.ZodTypeDef, unknown> = z
        .object({
            _environmentId: z.string().optional(),
            active: z.boolean().optional(),
            channel: Channel$.inboundSchema,
            check: z.boolean().optional(),
            conditions: z.array(StepFilter$.inboundSchema).optional(),
            credentials: CredentialsDto$.inboundSchema.optional(),
            identifier: z.string().optional(),
            name: z.string().optional(),
            providerId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                _environmentId: "environmentId",
            });
        });

    export type Outbound = {
        _environmentId?: string | undefined;
        active?: boolean | undefined;
        channel: string;
        check?: boolean | undefined;
        conditions?: Array<StepFilter$.Outbound> | undefined;
        credentials?: CredentialsDto$.Outbound | undefined;
        identifier?: string | undefined;
        name?: string | undefined;
        providerId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateIntegrationRequestDto> = z
        .object({
            environmentId: z.string().optional(),
            active: z.boolean().optional(),
            channel: Channel$.outboundSchema,
            check: z.boolean().optional(),
            conditions: z.array(StepFilter$.outboundSchema).optional(),
            credentials: CredentialsDto$.outboundSchema.optional(),
            identifier: z.string().optional(),
            name: z.string().optional(),
            providerId: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                environmentId: "_environmentId",
            });
        });
}
