/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type MemberInviteDTO = {
    inviterId: string;
    answerDate?: Date | undefined;
    email: string;
    invitationDate: Date;
    token: string;
};

/** @internal */
export namespace MemberInviteDTO$ {
    export const inboundSchema: z.ZodType<MemberInviteDTO, z.ZodTypeDef, unknown> = z
        .object({
            _inviterId: z.string(),
            answerDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            email: z.string(),
            invitationDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            token: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                _inviterId: "inviterId",
            });
        });

    export type Outbound = {
        _inviterId: string;
        answerDate?: string | undefined;
        email: string;
        invitationDate: string;
        token: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MemberInviteDTO> = z
        .object({
            inviterId: z.string(),
            answerDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            email: z.string(),
            invitationDate: z.date().transform((v) => v.toISOString()),
            token: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                inviterId: "_inviterId",
            });
        });
}
